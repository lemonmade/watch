// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../functions/shared/utilities/prisma"
}

model User {
  id    String @id @default(uuid())
  email String @unique

  githubAccount               GithubAccount?
  seriesSubscriptions         SeriesSubscription[]
  appInstallations            AppInstallation[]
  clipsExtensionInstallations ClipsExtensionInstallation[]
}

model GithubAccount {
  id         String  @id
  username   String
  profileUrl String
  avatarUrl  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum SeriesStatus {
  ENDED
  CANCELLED
  RETURNING
}

model Series {
  id         String       @id @default(uuid())
  tmdbId     String
  imdbId     String?
  name       String
  firstAired DateTime?
  status     SeriesStatus
  overview   String?
  posterUrl  String?

  seasons       Season[]
  subscriptions SeriesSubscription[]
}

model SeriesSubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum SeasonStatus {
  ENDED
  CONTINUING
}

model Season {
  id         String       @id @default(uuid())
  number     Int
  status     SeasonStatus
  firstAired DateTime?
  overview   String?
  posterUrl  String?

  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  episodes Episode[]
}

model Episode {
  id         String    @id @default(uuid())
  number     Int
  title      String
  firstAired DateTime?
  overview   String?
  stillUrl   String?

  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String
}

model App {
  id   String @id @default(uuid())
  name String

  installations   AppInstallation[]
  clipsExtensions ClipsExtension[]
}

model AppInstallation {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  app                App                          @relation(fields: [appId], references: [id])
  appId              String
  clipsInstallations ClipsExtensionInstallation[]
}

model ClipsExtension {
  id   String @id @default(uuid())
  name String

  app   App    @relation(fields: [appId], references: [id])
  appId String

  activeVersion   ClipsExtensionVersion? @relation(name: "activeVersion", fields: [activeVersionId], references: [id])
  activeVersionId String?

  versions      ClipsExtensionVersion[]
  installations ClipsExtensionInstallation[]
}

enum ClipsApiVersion {
  UNSTABLE
}

enum ClipsExtensionVersionStatus {
  PUBLISHED
  BUILDING
}

model ClipsExtensionVersion {
  id                  String                      @id @default(uuid())
  status              ClipsExtensionVersionStatus
  apiVersion          ClipsApiVersion
  scriptUrl           String?
  supports            Json?
  translations        Json?
  configurationSchema Json?

  extension   ClipsExtension @relation(fields: [extensionId], references: [id])
  extensionId String

  activeForExtension ClipsExtension[] @relation("activeVersion")
}

model ClipsExtensionInstallation {
  id             String @id @default(uuid())
  extensionPoint String
  configuration  Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  extension   ClipsExtension @relation(fields: [extensionId], references: [id])
  extensionId String

  appInstallation   AppInstallation @relation(fields: [appInstallationId], references: [id])
  appInstallationId String
}
