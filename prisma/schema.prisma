// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum SpoilerAvoidance {
  NONE
  UPCOMING
  EVERYTHING
}

enum UserRole {
  REGULAR
  ADMIN
}

enum UserLevel {
  FREE
  MEMBER
  PATRON
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
  role      UserRole @default(REGULAR)

  level        UserLevel           @default(FREE)
  giftCodes    AccountGiftCode[]
  subscription StripeSubscription?

  spoilerAvoidance SpoilerAvoidance @default(UPCOMING)

  passkeys      Passkey[]
  githubAccount GithubAccount?
  googleAccount GoogleAccount?

  skips                       Skip[]
  watches                     Watch[]
  watchThroughs               WatchThrough[]
  seriesSubscriptions         SeriesSubscription[]
  appInstallations            AppInstallation[]
  clipsExtensionInstallations ClipsExtensionInstallation[]
  personalAccessTokens        PersonalAccessToken[]
  apps                        App[]

  lists        List[]  @relation(name: "user")
  watchLater   List?   @relation(name: "watchLater", fields: [watchLaterId], references: [id])
  watchLaterId String? @unique
}

enum StripeSubscriptionStatus {
  INACTIVE
  ACTIVE
}

enum StripeSubscriptionLevel {
  MEMBER
  PATRON
}

model StripeSubscription {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  level StripeSubscriptionLevel

  priceId        String
  customerId     String
  subscriptionId String @unique

  status    StripeSubscriptionStatus @default(INACTIVE)
  startedAt DateTime?
  endedAt   DateTime?

  paymentFlow Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model AccountGiftCode {
  id        String   @id @default(uuid())
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  redeemedBy   User?     @relation(fields: [redeemedById], references: [id])
  redeemedById String?
  redeemedAt   DateTime?
}

model Passkey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  credentialId Bytes
  publicKey    Bytes
  counter      Int
  transports   Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model GoogleAccount {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email    String  @unique
  imageUrl String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model GithubAccount {
  id         String  @id
  username   String
  profileUrl String
  avatarUrl  String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model List {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  items     ListItem[]

  user           User   @relation(name: "user", fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  userId         String
  watchLaterUser User?  @relation(name: "watchLater")
}

model ListItem {
  id       String @id @default(uuid())
  position Int

  list   List   @relation(fields: [listId], references: [id])
  listId String

  series   Series? @relation(fields: [seriesId], references: [id])
  seriesId String?

  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String?

  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?
}

enum SeriesStatus {
  ENDED
  CANCELLED
  RETURNING
  IN_PRODUCTION
}

model Series {
  id          String       @id @default(uuid())
  tmdbId      String       @unique
  imdbId      String?
  name        String
  handle      String?
  firstAired  DateTime?
  status      SeriesStatus
  overview    String?      @db.VarChar(2000)
  posterUrl   String?
  seasonCount Int

  seasons       Season[]
  episodes      Episode[]
  subscriptions SeriesSubscription[]
  watchThroughs WatchThrough[]
  listItems     ListItem[]
}

model SeriesSubscription {
  id               String           @id @default(uuid())
  createdAt        DateTime         @default(now())
  spoilerAvoidance SpoilerAvoidance @default(UPCOMING)

  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([seriesId, userId])
}

enum SeasonStatus {
  ENDED
  CONTINUING
}

model Season {
  id           String       @id @default(uuid())
  number       Int
  status       SeasonStatus @default(CONTINUING)
  firstAired   DateTime?
  overview     String?      @db.VarChar(2000)
  posterUrl    String?
  episodeCount Int

  series   Series @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId String

  episodes Episode[]

  watches Watch[]
  skips   Skip[]

  listItems ListItem[]

  @@unique([seriesId, number])
}

model Episode {
  id         String    @id @default(uuid())
  number     Int
  title      String
  firstAired DateTime?
  overview   String?   @db.VarChar(2000)
  stillUrl   String?

  season       Season @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId     String
  seasonNumber Int

  series   Series @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId String

  skips   Skip[]
  watches Watch[]

  listItems ListItem[]

  @@unique([seasonId, number])
  @@index([seriesId, seasonNumber])
}

enum WatchThroughStatus {
  ONGOING
  STOPPED
  FINISHED
}

model WatchThrough {
  id               String             @id @default(uuid())
  includeEpisodes  Json
  nextEpisode      String?            @db.VarChar(20)
  from             Bytes
  to               Bytes
  current          Bytes?
  status           WatchThroughStatus @default(ONGOING)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  finishedAt       DateTime?
  spoilerAvoidance SpoilerAvoidance   @default(UPCOMING)

  series   Series @relation(fields: [seriesId], references: [id])
  seriesId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  skips   Skip[]
  watches Watch[]
}

model Watch {
  id               String    @id @default(uuid())
  notes            String?   @db.MediumText()
  containsSpoilers Boolean   @default(false)
  liked            Boolean?
  rating           Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  startedAt        DateTime?
  finishedAt       DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?

  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String?

  watchThrough   WatchThrough? @relation(fields: [watchThroughId], references: [id])
  watchThroughId String?
}

model Skip {
  id               String    @id @default(uuid())
  notes            String?   @db.MediumText()
  containsSpoilers Boolean   @default(false)
  at               DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  episode   Episode? @relation(fields: [episodeId], references: [id])
  episodeId String?

  season   Season? @relation(fields: [seasonId], references: [id])
  seasonId String?

  watchThrough   WatchThrough? @relation(fields: [watchThroughId], references: [id])
  watchThroughId String?
}

model App {
  id        String   @id @default(uuid())
  name      String
  handle    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  installations   AppInstallation[]
  clipsExtensions ClipsExtension[]

  @@unique([handle, userId])
}

model AppInstallation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  app                App                          @relation(fields: [appId], references: [id])
  appId              String
  clipsInstallations ClipsExtensionInstallation[]
}

model ClipsExtension {
  id        String   @id @default(uuid())
  name      String
  handle    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  app   App    @relation(fields: [appId], references: [id])
  appId String

  activeVersion   ClipsExtensionVersion? @relation(name: "activeVersion", fields: [activeVersionId], references: [id])
  activeVersionId String?

  versions      ClipsExtensionVersion[]
  installations ClipsExtensionInstallation[]

  @@unique([handle, appId])
}

enum ClipsApiVersion {
  UNSTABLE
}

enum ClipsExtensionVersionStatus {
  PUBLISHED
  BUILDING
}

model ClipsExtensionVersion {
  id           String                      @id @default(uuid())
  status       ClipsExtensionVersionStatus
  apiVersion   ClipsApiVersion
  scriptUrl    String?                     @db.VarChar(400)
  extends      Json?
  translations Json?
  settings     Json?
  createdAt    DateTime                    @default(now())
  updatedAt    DateTime                    @updatedAt

  extension   ClipsExtension @relation(fields: [extensionId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  extensionId String

  activeForExtension ClipsExtension[] @relation("activeVersion")
}

model ClipsExtensionInstallation {
  id        String   @id @default(uuid())
  target    String
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  extension   ClipsExtension @relation(fields: [extensionId], references: [id])
  extensionId String

  appInstallation   AppInstallation @relation(fields: [appInstallationId], references: [id])
  appInstallationId String
}

model PersonalAccessToken {
  id         String    @id @default(uuid())
  token      String    @unique
  label      String?
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
