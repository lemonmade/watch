name: Deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build

    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v1
        name: Setup node.js and yarn
        with:
          node-version: 16.2.0
          registry-url: https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get yarn cache directory
        id: yarn-cache-get-dir
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        id: yarn-cache
        name: Restore yarn cache
        with:
          path: ${{ steps.yarn-cache-get-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - name: Yarn install
        run: yarn install --immutable

      - name: Build
        run: |
          yarn build
          node ./scripts/build-prisma-layers.js

      - name: Save build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            **/build/
            !**/node_modules/**/*

  deploy-packages:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy updated packages

    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v1
        name: Setup node.js and yarn
        with:
          node-version: 16.2.0
          registry-url: https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get yarn cache directory
        id: yarn-cache-get-dir
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        id: yarn-cache
        name: Restore yarn cache
        with:
          path: ${{ steps.yarn-cache-get-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - name: Yarn install
        run: yarn install --immutable

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Deploy updated packages
        run: |
          echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
          yarn packages:publish
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-aws:
    needs: build
    runs-on: ubuntu-latest
    name: Deploy to AWS

    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v1
        name: Setup node.js and yarn
        with:
          node-version: 16.2.0
          registry-url: https://registry.npmjs.org/
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get yarn cache directory
        id: yarn-cache-get-dir
        run: echo "::set-output name=dir::$(yarn config get cacheFolder)"

      - uses: actions/cache@v2
        id: yarn-cache
        name: Restore yarn cache
        with:
          path: ${{ steps.yarn-cache-get-dir.outputs.dir }}
          key: ${{ runner.os }}-yarn-v1-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-v1-

      - name: Yarn install
        run: yarn install --immutable

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy database migration infrastructure to AWS
        run: yarn cdk deploy WatchMigrateDatabaseStack --require-approval never

      - name: Run database migrations
        run: aws lambda invoke --function-name WatchMigratePrimaryDatabaseFunction /dev/stdout

      - name: Deploy application code to AWS
        run: yarn cdk deploy WatchStack --require-approval never
