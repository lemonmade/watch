name: Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build-app:
    name: Build app 🏗
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter app... run build
      - uses: actions/upload-artifact@v4
        with:
          name: build-app
          path: app/build

  deploy-packages:
    name: Deploy updated packages 📦
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter "@watching/*" run build

      - name: Deploy updated packages
        run: |
          echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
          pnpm run packages.deploy --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-cloudflare-worker-app:
    name: Deploy app to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: build-app
          path: app/build

      - run: ls -R
      - uses: ./.github/workflows/actions/prepare
      - uses: ./.github/workflows/actions/deploy-app-assets
        with:
          access-key-id: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          access-key-secret: ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_SECRET }}
      - run: pnpm --filter ./app run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-worker-email:
    name: Deploy email to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter email run build
      - run: pnpm --filter email run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-worker-images:
    name: Deploy images to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter images run build
      - run: pnpm --filter images run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-worker-clips-upload:
    name: Deploy clips-upload to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter clips-upload run build
      - run: pnpm --filter clips-upload run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-worker-metrics:
    name: Deploy metrics to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter metrics run build
      - run: pnpm --filter metrics run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-worker-stripe-hooks:
    name: Deploy stripe-hooks to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs:
      - deploy-cloudflare-worker-email

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter stripe-hooks run build
      - run: pnpm --filter stripe-hooks run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-worker-tmdb-refresher:
    name: Deploy tmdb-refresher to Cloudflare 🌥
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare
      - run: pnpm exec prisma generate
      - uses: ./.github/workflows/actions/type-check-with-cache
      - run: pnpm --filter tmdb-refresher run build
      - run: pnpm --filter tmdb-refresher run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-cloudflare-router:
    name: Deploy router to Cloudflare 🌥
    needs:
      - deploy-cloudflare-worker-app
      - deploy-cloudflare-worker-email
      - deploy-cloudflare-worker-images
      - deploy-cloudflare-worker-clips-upload
      - deploy-cloudflare-worker-metrics
      - deploy-cloudflare-worker-stripe-hooks
      - deploy-cloudflare-worker-tmdb-refresher
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/workflows/actions/prepare

      - uses: actions/download-artifact@v4
        with:
          name: build-app
          path: app/build

      - run: pnpm --filter router run build

      # TODO: you can get in a weird state where the app server might send pages with
      # new queries before the router is updated, and before we do this push. Going to
      # just leave it in place until I can bring persisted queries into the app server.
      - run: pnpm run typescript.run ./scripts/cloudflare/put-graphql-persisted-operations.ts
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - run: pnpm --filter router run deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
