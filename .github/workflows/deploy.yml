name: Deploy

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  checks:
    name: Checks 📝
    uses: ./.github/workflows/checks.yml

  build:
    name: Build 🏗
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/prepare

      - name: Create Prisma client
        run: pnpm prisma generate --data-proxy

      - uses: quilt-framework/action-build@v2
        with:
          cache-key: ${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Save build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: |
            ./build/
            ./app/build/
            ./functions/*/build/
            ./packages/*/build/
            ./packages/*/bin/
            ./packages/cli/graphql/
            ./packages/clips/source/graphql/

  deploy-packages:
    name: Deploy updated packages 📦
    needs: [checks, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/prepare

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Deploy updated packages
        run: |
          echo //registry.npmjs.org/:_authToken=${NPM_TOKEN} > .npmrc
          pnpm packages:deploy -- --no-git-checks
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  deploy-google-cloud:
    name: Deploy to Google Cloud 🌈
    needs: [checks, build]
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    strategy:
      matrix:
        function: [email]

    steps:
      - uses: actions/checkout@v3

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: projects/357202806916/locations/global/workloadIdentityPools/my-pool/providers/my-provider
          service_account: watch-github-actions@watch-353105.iam.gserviceaccount.com

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: watch-353105

      - name: Log Google Cloud CLI information
        run: gcloud info

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Build Docker image on Google Cloud Build
        run: gcloud builds submit --config ./functions/${{ matrix.function }}/cloudbuild.yaml --substitutions COMMIT_SHA=${{ github.sha }} --ignore-file .dockerignore

      - name: Deploy to Google Cloud Run
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ matrix.function }}
          region: northamerica-northeast1
          image: northamerica-northeast1-docker.pkg.dev/watch-353105/watch/${{ matrix.function }}:${{ github.sha }}

  deploy-cloudflare-assets:
    name: Deploy assets to Cloudflare 🌥
    needs: [checks, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Configure R2 credentials for AWS CLI
        run: |
          aws configure set region us-east-1
          aws configure set aws_access_key_id ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.CLOUDFLARE_R2_ACCESS_KEY_SECRET }}

      - name: Sync app assets to R2
        run: |
          aws s3 sync ./app/build/assets/ s3://watch-assets/assets/ --endpoint-url https://9bfdb755def60e50760e33036c6f1624.r2.cloudflarestorage.com --cache-control "public, max-age=31536000, immutable"

  deploy-cloudflare-workers:
    name: Deploy to Cloudflare 🌥
    needs: [checks, build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        worker:
          - upload-clips
          - tmdb-refresher
          - tmdb-refresher-scheduler

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/prepare

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Deploy worker to Cloudflare
        run: pnpm run deploy:wrangler publish -- --config functions/{{ matrix.worker }}/wrangler.toml
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-fly:
    name: Deploy to Fly.io 🦋
    needs: [checks, build]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Authenticate with Fly container registry
        uses: docker/login-action@v1
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: Docker build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: app/Dockerfile
          push: true
          tags: registry.fly.io/watch-test-app:${{ github.ref_name }}-${{ github.sha }}
          build-args: |
            COMMIT_SHA=${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # This ugly bit is necessary if you don't want your cache to grow forever
      # till it hits GitHub's limit of 5GB.
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Deploy application code to Fly.io
        uses: superfly/flyctl-actions@1.3
        with:
          args: 'deploy --config app/fly.toml --image registry.fly.io/watch-test-app:${{ github.ref_name }}-${{ github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  deploy-cloudflare-router:
    name: Deploy router to Cloudflare 🌥
    needs:
      - deploy-fly
      - deploy-cloudflare-assets
      - deploy-cloudflare-workers
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/workflows/actions/prepare

      - name: Restore build artifacts
        uses: actions/download-artifact@v2
        with:
          name: build

      - name: Deploy application code to Cloudflare
        run: pnpm run deploy:wrangler publish -- --config functions/router/wrangler.toml
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
