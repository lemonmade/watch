scalar Date
scalar Notes
scalar Url

interface Watchable {
  id: ID!
  watches: [Watch!]!
  latestWatch: Watch
}

interface Reviewable {
  rating: Int
  notes: Notes
}

type Episode implements Watchable {
  id: ID!
  title: String!
  series: Series!
  season: Season!
  number: Int!
  firstAired: Date
  watches: [Watch!]!
  latestWatch: Watch
  still: Image
  overview: String
}

type Season {
  id: ID!
  series: Series!
  number: Int!
  episodes: [Episode!]!
  firstAired: Date
  poster: Image
  overview: String
  isSpecials: Boolean!
  status: SeasonStatus!
}

type Series {
  id: ID!
  tmdbId: ID!
  imdbId: ID!
  name: String!
  poster: Image
  overview: String
  firstAired: Date
  status: SeriesStatus!
  seasons: [Season!]!
  season(number: Int!): Season
  episodes: [Episode!]!
  episode(number: Int!, seasonNumber: Int!): Episode
}

enum WatchThroughStatus {
  ONGOING
  STOPPED
  FINISHED
}

enum EpisodeWatchedFilter {
  WATCHED
  UNWATCHED
}

enum SeriesStatus {
  RETURNING
  ENDED
  CANCELLED
}

enum SeasonStatus {
  CONTINUING
  ENDED
}

union WatchThroughEpisodeAction = Watch | Skip

type WatchThroughEpisode {
  id: ID!
  episode: Episode!
  finished: Boolean!
  watchThrough: WatchThrough!
  action: WatchThroughEpisodeAction
}

type WatchThrough implements Reviewable {
  id: ID!
  series: Series!
  startedAt: Date
  updatedAt: Date!
  lastAction: WatchThroughEpisodeAction
  finishedAt: Date
  watches: [Watch!]!
  nextEpisode: Episode
  status: WatchThroughStatus!
  rating: Int
  notes: Notes
  lastEpisode: WatchThroughEpisode
  episodes(
    finished: Boolean
    watched: EpisodeWatchedFilter
  ): [WatchThroughEpisode!]!
  unfinishedEpisodeCount: Int!
}

type Watch implements Reviewable {
  id: ID!
  media: Watchable!
  startedAt: Date
  finishedAt: Date
  rating: Int
  notes: Notes
  watchThrough: WatchThrough
}

type Skip {
  id: ID!
  at: Date
  media: Watchable!
  notes: Notes
  watchThrough: WatchThrough
}

type WatchEpisodePayload {
  watch: Watch
  episode: Episode
  watchThrough: WatchThrough
}

type SkipEpisodePayload {
  skip: Skip
  episode: Episode
  watchThrough: WatchThrough
}

type StartWatchThroughPayload {
  watchThrough: WatchThrough
}

type StopWatchThroughPayload {
  watchThrough: WatchThrough
}

type DeleteWatchThroughPayload {
  deletedWatchThroughId: ID!
}

type DeleteWatchPayload {
  deletedWatchId: ID!
  watchThrough: WatchThrough
}

type SearchResults {
  series: [Series!]!
}

input SeriesSliceEndpoint {
  episodeNumber: Int!
  seasonNumber: Int!
}

input SeriesSlice {
  from: SeriesSliceEndpoint
  to: SeriesSliceEndpoint!
}

type WatchEpisodesFromSeriesPayload {
  series: Series
}

type SeriesSubscription {
  id: ID!
  series: Series!
  subscribedOn: Date!
}

type SeriesSubscriptionPayload {
  subscription: SeriesSubscription
}

type UpdateSeasonPayload {
  season: Season
}

# type User {
#   id: ID!
#   avatar: Image
# }

# type Business {
#   id: ID!
#   icon: Icon
# }

# union AppAuthor = User | Business

type Image {
  source: Url!
}

type Icon {
  source: Url!
}

type App {
  id: ID!
  icon: Icon
  extensions: [AppExtension!]!
}

type ClipsExtension {
  id: ID!
  name: String!
  app: App!
  latestVersion: ClipsExtensionVersion!
  versions: [ClipsExtensionVersion!]!
}

scalar ClipsExtensionApiVersion
scalar ClipsExtensionPoint

# type ClipsExtensionBasicSettings {
#   showAuthor: Boolean!
# }

# union ClipsExtensionSettings = ClipsExtensionBasicSettings

type ClipsExtensionVersion {
  id: ID!
  status: ClipsExtensionVersionStatus!
  assets: [Asset!]!
  apiVersion: ClipsExtensionApiVersion!
  extension: ClipsExtension!
  # allowedExtensionPoints: [ClipsExtensionPoint!]!
  # configurationSchema: ClipsExtensionConfigurationSchema
  # settings: ClipsExtensionSettings
}

# type ClipsExtensionConfigurationSchema {
#   fields: [ClipsExtensionConfigurationField!]!
# }

# scalar TranslationKey

# type ClipsExtensionConfigurationStringTranslation {
#   key: TranslationKey!
# }

# type ClipsExtensionConfigurationStringStatic {
#   value: String!
# }

# union ClipsExtensionConfigurationString =
#     ClipsExtensionConfigurationStringTranslation
#   | ClipsExtensionConfigurationStringStatic

# interface ClipsExtensionTypedConfigurationField {
#   name: String!
# }

# type ClipsExtensionStringConfigurationField implements ClipsExtensionTypedConfigurationField {
#   name: String!
#   label: ClipsExtensionConfigurationString!
# }

# union ClipsExtensionConfigurationField = ClipsExtensionStringConfigurationField

type Asset {
  source: Url!
}

union AppExtension = ClipsExtension

# scalar ClipsExtensionConfigurationBlob

enum ClipsExtensionVersionStatus {
  PUBLISHED
  BUILDING
}

type AppInstallation {
  id: ID!
  app: App!
  extensions: [AppExtensionInstallation!]!
}

type ClipsExtensionInstallation {
  id: ID!
  extension: ClipsExtension!
  version: ClipsExtensionVersion!
  extensionPoint: ClipsExtensionPoint!
  appInstallation: AppInstallation!
  # configuration: ClipsExtensionConfigurationBlob
}

type CreateAppPayload {
  app: App
}

type DeleteAppPayload {
  deletedId: ID
}

type UpdateAppPayload {
  app: App
}

type CreateClipsExtensionPayload {
  app: App
  extension: ClipsExtension
}

type DeleteClipsExtensionPayload {
  app: App
  deletedId: ID
}

type UpdateClipsExtensionPayload {
  app: App
  extension: ClipsExtension
}

type CreateClipsExtensionVersionPayload {
  extension: ClipsExtension
  version: ClipsExtensionVersion
}

type PublishClipsExtensionVersionPayload {
  extension: ClipsExtension
  version: ClipsExtensionVersion
}

type InstallAppPayload {
  app: App
  installation: AppInstallation
}

type InstallClipsExtensionPayload {
  extension: ClipsExtension
  installation: ClipsExtensionInstallation
}

union AppExtensionInstallation = ClipsExtensionInstallation

type Query {
  watch(id: ID!): Watch
  series(id: ID!): Series
  watchThrough(id: ID!): WatchThrough
  watchThroughs(status: WatchThroughStatus): [WatchThrough!]!
  subscription(id: ID!): SeriesSubscription
  subscriptions: [SeriesSubscription!]!
  search(query: String!): SearchResults!

  app(id: ID!): App
  clipsInstallations(
    extensionPoint: ClipsExtensionPoint
  ): [ClipsExtensionInstallation!]!
}

type Mutation {
  skipEpisode(
    episode: ID!
    watchThrough: ID
    notes: Notes
    at: Date
  ): SkipEpisodePayload!
  watchEpisode(
    episode: ID!
    watchThrough: ID
    rating: Int
    notes: Notes
    startedAt: Date
    finishedAt: Date
  ): WatchEpisodePayload!
  watchEpisodesFromSeries(
    series: ID!
    slice: SeriesSlice
  ): WatchEpisodesFromSeriesPayload!
  startWatchThrough(
    series: ID!
    seasons: [ID!]
    episodes: [ID!]
  ): StartWatchThroughPayload!
  stopWatchThrough(id: ID!): StopWatchThroughPayload!
  subscribeToSeries(id: ID!): SeriesSubscriptionPayload!
  deleteWatchThrough(id: ID!): DeleteWatchThroughPayload!
  deleteWatch(id: ID!): DeleteWatchPayload!
  updateSeason(id: ID!, status: SeasonStatus): UpdateSeasonPayload!

  createApp(name: String!): CreateAppPayload!
  deleteApp(id: ID!): DeleteAppPayload!
  updateApp(id: ID!, name: String): UpdateAppPayload!
  createClipsExtension(name: String!, appId: ID!): CreateClipsExtensionPayload!
  deleteClipsExtension(id: ID!): DeleteClipsExtensionPayload!
  updateClipsExtension(id: ID!, name: String): UpdateClipsExtensionPayload!
  createClipsExtensionVersion(
    extensionId: ID!
  ): CreateClipsExtensionVersionPayload!
  publishClipsExtensionVersion(
    id: ID!
    script: String
  ): PublishClipsExtensionVersionPayload!
  installApp(id: ID!): InstallAppPayload!
  installClipsExtension(
    id: ID!
    appInstallationId: ID!
    extensionPoint: ClipsExtensionPoint
  ): InstallClipsExtensionPayload!
}

schema {
  query: Query
  mutation: Mutation
}
