scalar Date
scalar Notes
scalar Url
scalar Email
scalar GithubID
scalar JSON
scalar TranslationKey

type UserSettings {
  spoilerAvoidance: SpoilerAvoidance!
}

type User {
  id: ID!
  email: Email!
  githubAccount: GithubAccount
  watchLater: List!

  accessTokens: [PersonalAccessToken!]!
  app(id: ID, name: String): App
  apps: [App!]!

  settings: UserSettings!
}

type GithubAccount {
  id: GithubID!
  username: String!
  profileUrl: Url!
  avatarImage: Image
}

interface Watchable {
  id: ID!
  watches: [Watch!]!
  latestWatch: Watch
}

interface Skippable {
  id: ID!
  skips: [Skip!]!
  latestSkip: Skip
}

interface Reviewable {
  rating: Int
  notes: Notes
}

type Episode implements Watchable & Skippable & Listable {
  id: ID!
  title: String!
  series: Series!
  season: Season!
  number: Int!
  firstAired: Date
  still: Image
  overview: String

  watches: [Watch!]!
  latestWatch: Watch

  skips: [Skip!]!
  latestSkip: Skip
}

type Season implements Watchable & Skippable & Listable {
  id: ID!
  series: Series!
  number: Int!
  episodes: [Episode!]!
  firstAired: Date
  poster: Image
  overview: String
  isSpecials: Boolean!
  status: SeasonStatus!

  watches: [Watch!]!
  latestWatch: Watch

  skips: [Skip!]!
  latestSkip: Skip
}

type Series implements Listable {
  id: ID!
  tmdbId: ID!
  imdbId: ID!
  name: String!
  poster: Image
  overview: String
  firstAired: Date
  status: SeriesStatus!
  seasons: [Season!]!
  season(number: Int!): Season
  episodes: [Episode!]!
  episode(number: Int!, seasonNumber: Int!): Episode

  subscription: SeriesSubscription
  watchThroughs: [WatchThrough!]!

  lists: [List!]!
  inWatchLater: Boolean!
}

enum SpoilerAvoidance {
  NONE
  UPCOMING
  EVERYTHING
}

enum WatchThroughStatus {
  ONGOING
  STOPPED
  FINISHED
}

enum EpisodeWatchedFilter {
  WATCHED
  UNWATCHED
}

enum SeriesStatus {
  RETURNING
  ENDED
  CANCELLED
}

enum SeasonStatus {
  CONTINUING
  ENDED
}

type WatchThroughSettings {
  spoilerAvoidance: SpoilerAvoidance!
}

type WatchThrough {
  id: ID!
  series: Series!
  from: EpisodeSlice!
  to: EpisodeSlice!
  startedAt: Date
  createdAt: Date!
  updatedAt: Date!
  finishedAt: Date
  status: WatchThroughStatus!
  watches: [Watch!]!
  actions: [Action!]!
  nextEpisode: Episode
  unfinishedEpisodeCount: Int!
  settings: WatchThroughSettings!
}

union Action = Watch | Skip

type Watch implements Reviewable {
  id: ID!
  media: Watchable!
  startedAt: Date
  finishedAt: Date
  createdAt: Date!
  updatedAt: Date!
  rating: Int
  notes: Notes
  watchThrough: WatchThrough
}

type Skip {
  id: ID!
  at: Date
  createdAt: Date!
  updatedAt: Date!
  media: Skippable!
  notes: Notes
  watchThrough: WatchThrough
}

type List {
  id: ID!
  items: [ListItem!]!
}

type ListItem {
  id: ID!
  position: Int!
  media: Listable!
}

interface Listable {
  id: ID!
  lists: [List!]!
}

type WatchEpisodePayload {
  watch: Watch
  episode: Episode
  watchThrough: WatchThrough
  watchLater: List!
}

type SkipEpisodePayload {
  skip: Skip
  episode: Episode
  watchThrough: WatchThrough
  watchLater: List!
}

type UpdateWatchThroughSettingsPayload {
  watchThrough: WatchThrough
}

type StartWatchThroughPayload {
  watchThrough: WatchThrough
  watchLater: List!
}

type StopWatchThroughPayload {
  watchThrough: WatchThrough
  watchLater: List!
}

type DeleteWatchThroughPayload {
  deletedWatchThroughId: ID!
  watchLater: List!
}

type DeleteWatchPayload {
  deletedWatchId: ID!
  watchThrough: WatchThrough
}

type SearchResults {
  series: [Series!]!
}

input EpisodeSliceInput {
  season: Int!
  episode: Int
}

type EpisodeSlice {
  season: Int!
  episode: Int
}

type WatchEpisodesFromSeriesPayload {
  series: Series
  watchLater: List!
}

type SeriesSubscriptionSettings {
  spoilerAvoidance: SpoilerAvoidance!
}

type SeriesSubscription {
  id: ID!
  series: Series!
  subscribedOn: Date!
  settings: SeriesSubscriptionSettings!
}

type SubscribeToSeriesPayload {
  subscription: SeriesSubscription
}

type UnsubscribeFromSeriesPayload {
  deletedSubscriptionId: ID!
}

type UpdateSeriesSubscriptionSettingsPayload {
  subscription: SeriesSubscription
}

type UpdateSeasonPayload {
  season: Season
}

type Image {
  source: Url!
}

type Icon {
  source: Url!
}

type App {
  id: ID!
  name: String!
  icon: Icon
  extensions: [AppExtension!]!

  isInstalled: Boolean!
}

type ClipsExtension {
  id: ID!
  name: String!
  app: App!
  latestVersion: ClipsExtensionVersion
  versions: [ClipsExtensionVersion!]!

  isInstalled: Boolean!
}

scalar ClipsExtensionApiVersion
scalar ClipsExtensionPoint

# type ClipsExtensionBasicSettings {
#   showAuthor: Boolean!
# }

# union ClipsExtensionSettings = ClipsExtensionBasicSettings

# Extension point conditions

type ClipsExtensionPointSeriesCondition {
  id: ID!
}

union ClipsExtensionPointCondition = ClipsExtensionPointSeriesCondition

type ClipsExtensionPointSupport {
  extensionPoint: ClipsExtensionPoint!
  conditions: [ClipsExtensionPointCondition!]!
}

input ClipsExtensionPointConditionInput {
  seriesId: ID
}

input ClipsExtensionPointSupportInput {
  extensionPoint: ClipsExtensionPoint!
  conditions: [ClipsExtensionPointConditionInput!]
}

# Extension point configuration

type ClipsExtensionConfigurationSchema {
  fields: [ClipsExtensionConfigurationField!]!
}

type ClipsExtensionConfigurationStringTranslation {
  key: TranslationKey!
}

type ClipsExtensionConfigurationStringStatic {
  value: String!
}

union ClipsExtensionConfigurationString =
    ClipsExtensionConfigurationStringTranslation
  | ClipsExtensionConfigurationStringStatic

interface ClipsExtensionTypedConfigurationField {
  key: String!
  label: ClipsExtensionConfigurationString!
}

type ClipsExtensionStringConfigurationField implements ClipsExtensionTypedConfigurationField {
  key: String!
  label: ClipsExtensionConfigurationString!
  default: String
}

type ClipsExtensionNumberConfigurationField implements ClipsExtensionTypedConfigurationField {
  key: String!
  label: ClipsExtensionConfigurationString!
  default: Float
}

type ClipsExtensionOptionConfigurationFieldOption {
  value: String!
  label: ClipsExtensionConfigurationString!
}

type ClipsExtensionOptionsConfigurationField implements ClipsExtensionTypedConfigurationField {
  key: String!
  label: ClipsExtensionConfigurationString!
  default: String
  options: [ClipsExtensionOptionConfigurationFieldOption!]!
}

union ClipsExtensionConfigurationField =
    ClipsExtensionStringConfigurationField
  | ClipsExtensionNumberConfigurationField
  | ClipsExtensionOptionsConfigurationField

input ClipsExtensionConfigurationSchemaFieldsInput {
  string: ClipsExtensionConfigurationSchemaStringFieldInput
  number: ClipsExtensionConfigurationSchemaNumberFieldInput
  options: ClipsExtensionConfigurationSchemaOptionsFieldInput
}

input ClipsExtensionConfigurationStringInput {
  static: String
  translation: TranslationKey
}

input ClipsExtensionConfigurationSchemaStringFieldInput {
  key: String!
  label: ClipsExtensionConfigurationStringInput!
  default: String
}

input ClipsExtensionConfigurationSchemaNumberFieldInput {
  key: String!
  label: ClipsExtensionConfigurationStringInput!
  default: Float
}

input ClipsExtensionConfigurationSchemaOptionsFieldInput {
  key: String!
  label: ClipsExtensionConfigurationStringInput!
  default: String
  options: [ClipsExtensionOptionConfigurationFieldOptionInput!]!
}

input ClipsExtensionOptionConfigurationFieldOptionInput {
  value: String!
  label: ClipsExtensionConfigurationStringInput!
}

type ClipsExtensionVersion {
  id: ID!
  status: ClipsExtensionVersionStatus!
  assets: [Asset!]!
  apiVersion: ClipsExtensionApiVersion!
  extension: ClipsExtension!
  supports: [ClipsExtensionPointSupport!]!
  configurationSchema: [ClipsExtensionConfigurationField!]!
  translations: JSON
  # settings: ClipsExtensionSettings
}

type Asset {
  source: Url!
}

union AppExtension = ClipsExtension

# scalar ClipsExtensionConfigurationBlob

enum ClipsExtensionVersionStatus {
  PUBLISHED
  BUILDING
}

type AppInstallation {
  id: ID!
  app: App!
  extensions: [AppExtensionInstallation!]!
}

type ClipsExtensionInstallation {
  id: ID!
  extension: ClipsExtension!
  version: ClipsExtensionVersion!
  extensionPoint: ClipsExtensionPoint!
  appInstallation: AppInstallation!
  configuration: JSON
}

type CreateAppPayload {
  app: App
}

type DeleteAppPayload {
  deletedId: ID
}

type UpdateAppPayload {
  app: App
}

type CreateClipsExtensionPayload {
  app: App
  extension: ClipsExtension
  version: ClipsExtensionVersion
  signedScriptUpload: Url
}

type DeleteClipsExtensionPayload {
  app: App
  deletedId: ID
}

type UpdateClipsExtensionPayload {
  app: App
  extension: ClipsExtension
}

type PushClipsExtensionPayload {
  extension: ClipsExtension
  version: ClipsExtensionVersion
  signedScriptUpload: Url
}

type PublishClipsExtensionVersionPayload {
  extension: ClipsExtension
  version: ClipsExtensionVersion
}

type InstallAppPayload {
  app: App
  installation: AppInstallation
}

type InstallClipsExtensionPayload {
  extension: ClipsExtension
  installation: ClipsExtensionInstallation
}

type UninstallClipsExtensionPayload {
  extension: ClipsExtension
  deletedInstallationId: ID
}

type UpdateClipsExtensionInstallationPayload {
  extension: ClipsExtension
  installation: ClipsExtensionInstallation
}

type SignInPayload {
  email: Email!
}

type CreateAccountPayload {
  email: Email!
}

type DeleteAccountPayload {
  deletedId: ID!
}

type DisconnectGithubAccountPayload {
  deletedAccount: GithubAccount
}

type SignOutPayload {
  userId: ID!
}

union AppExtensionInstallation = ClipsExtensionInstallation

input CreateClipsInitialVersion {
  hash: String!
  translations: JSON
  supports: [ClipsExtensionPointSupportInput!]
  configurationSchema: [ClipsExtensionConfigurationSchemaFieldsInput!]
}

type PersonalAccessToken {
  id: ID!
  label: String
  prefix: String!
  length: Int!
  createdAt: Date!
  lastUsedAt: Date
  lastFourCharacters: String!
}

type CreatePersonalAccessTokenPayload {
  plaintextToken: String
  personalAccessToken: PersonalAccessToken
}

type DeletePersonalAccessTokenPayload {
  deletedPersonalAccessTokenId: ID
}

type UpdateUserSettingsPayload {
  user: User!
}

type WatchLaterPayload {
  list: List!
  item: ListItem
  series: Series
}

type RemoveFromWatchLaterPayload {
  list: List!
  series: Series
  removedListItemId: ID
}

type AddToListPayload {
  list: List
  item: ListItem
  series: Series
}

type RemoveFromListPayload {
  list: List
  series: Series
  removedListItemId: ID
}

type Query {
  me: User!
  my: User!
  watch(id: ID!): Watch
  series(id: ID!): Series
  watchThrough(id: ID!): WatchThrough
  watchThroughs(status: WatchThroughStatus): [WatchThrough!]!
  subscription(id: ID!): SeriesSubscription
  subscriptions: [SeriesSubscription!]!
  search(query: String!): SearchResults!

  lists: [List!]!
  list(id: ID!): List
  watchLater: List!

  apps: [App!]!
  app(id: ID!): App
  clipsInstallation(id: ID!): ClipsExtensionInstallation
  clipsInstallations(
    extensionPoint: ClipsExtensionPoint
    conditions: [ClipsExtensionPointConditionInput!]
  ): [ClipsExtensionInstallation!]!
}

type Mutation {
  skipEpisode(
    episode: ID!
    watchThrough: ID
    notes: Notes
    at: Date
    updateWatchLater: Boolean
  ): SkipEpisodePayload!
  watchEpisode(
    episode: ID!
    watchThrough: ID
    rating: Int
    notes: Notes
    startedAt: Date
    finishedAt: Date
    updateWatchLater: Boolean
  ): WatchEpisodePayload!
  watchEpisodesFromSeries(
    series: ID!
    from: EpisodeSliceInput
    to: EpisodeSliceInput
    updateWatchLater: Boolean
  ): WatchEpisodesFromSeriesPayload!
  startWatchThrough(
    series: ID!
    from: EpisodeSliceInput
    to: EpisodeSliceInput
    includeSpecials: Boolean
    spoilerAvoidance: SpoilerAvoidance
    updateWatchLater: Boolean
  ): StartWatchThroughPayload!
  stopWatchThrough(id: ID!, watchLater: Boolean): StopWatchThroughPayload!
  deleteWatchThrough(id: ID!, watchLater: Boolean): DeleteWatchThroughPayload!
  deleteWatch(id: ID!): DeleteWatchPayload!
  updateSeason(id: ID!, status: SeasonStatus): UpdateSeasonPayload!
  updateWatchThroughSettings(
    id: ID!
    spoilerAvoidance: SpoilerAvoidance
  ): UpdateWatchThroughSettingsPayload!

  subscribeToSeries(
    id: ID!
    spoilerAvoidance: SpoilerAvoidance
  ): SubscribeToSeriesPayload!
  unsubscribeFromSeries(id: ID!): UnsubscribeFromSeriesPayload!
  updateSeriesSubscriptionSettings(
    id: ID!
    spoilerAvoidance: SpoilerAvoidance!
  ): UpdateSeriesSubscriptionSettingsPayload!

  createApp(name: String!): CreateAppPayload!
  deleteApp(id: ID!): DeleteAppPayload!
  updateApp(id: ID!, name: String): UpdateAppPayload!
  createClipsExtension(
    name: String!
    appId: ID!
    initialVersion: CreateClipsInitialVersion
  ): CreateClipsExtensionPayload!
  deleteClipsExtension(id: ID!): DeleteClipsExtensionPayload!
  updateClipsExtension(id: ID!, name: String): UpdateClipsExtensionPayload!
  pushClipsExtension(
    extensionId: ID!
    hash: String!
    name: String
    translations: JSON
    supports: [ClipsExtensionPointSupportInput!]
    configurationSchema: [ClipsExtensionConfigurationSchemaFieldsInput!]
  ): PushClipsExtensionPayload!
  publishLatestClipsExtensionVersion(
    extensionId: ID!
  ): PublishClipsExtensionVersionPayload!
  installApp(id: ID!): InstallAppPayload!
  installClipsExtension(
    id: ID!
    extensionPoint: ClipsExtensionPoint
    configuration: JSON
  ): InstallClipsExtensionPayload!
  uninstallClipsExtension(id: ID!): UninstallClipsExtensionPayload!
  updateClipsExtensionInstallation(
    id: ID!
    configuration: JSON
  ): UpdateClipsExtensionInstallationPayload!

  createAccount(email: Email!, redirectTo: Url): CreateAccountPayload!
  deleteAccount: DeleteAccountPayload!
  signIn(email: Email!, redirectTo: Url): SignInPayload!
  signOut: SignOutPayload!
  disconnectGithubAccount: DisconnectGithubAccountPayload!
  createPersonalAccessToken(label: String): CreatePersonalAccessTokenPayload!
  deletePersonalAccessToken(
    id: ID
    token: String
  ): DeletePersonalAccessTokenPayload!
  updateUserSettings(
    spoilerAvoidance: SpoilerAvoidance
  ): UpdateUserSettingsPayload!

  watchLater(seriesId: ID): WatchLaterPayload!
  removeFromWatchLater(seriesId: ID): RemoveFromWatchLaterPayload!
  addToList(id: ID!, seriesId: ID): AddToListPayload!
  removeFromList(id: ID!, itemId: ID!): RemoveFromListPayload!
}

schema {
  query: Query
  mutation: Mutation
}
