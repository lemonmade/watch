#import "./shared.schema.graphql"

extend type Query {
  me: User!
  my: User!
}

extend type Mutation {
  createAccount(
    email: Email!
    code: String
    redirectTo: Url
  ): CreateAccountPayload!
  deleteAccount: DeleteAccountPayload!
  createAccountGiftCode: CreateAccountGiftCodePayload!
  redeemAccountGiftCode(code: String!): RedeemAccountCodePayload!
  prepareSubscription(level: SubscriptionLevel!): PrepareSubscriptionPayload!
  cancelSubscription: CancelSubscriptionPayload!
  signIn(email: Email!, redirectTo: Url): SignInPayload!
  signOut: SignOutPayload!
  disconnectGithubAccount: DisconnectGithubAccountPayload!
  disconnectGoogleAccount: DisconnectGoogleAccountPayload!
  createPersonalAccessToken(label: String): CreatePersonalAccessTokenPayload!
  deletePersonalAccessToken(
    id: ID
    token: String
  ): DeletePersonalAccessTokenPayload!
  updateUserSettings(
    spoilerAvoidance: SpoilerAvoidance
  ): UpdateUserSettingsPayload!
  startWebAuthnRegistration: StartRegistrationPayload!
  createWebAuthnCredential(credential: JSON!): CreateWebAuthnCredentialPayload!
  deleteWebAuthnCredential(id: ID!): DeleteWebAuthnCredential!
  startWebAuthnSignIn(email: String): StartWebAuthnSignInPayload!
  completeWebAuthnSignIn(credential: JSON!): CompleteWebAuthnSignInPayload!
}

type WebAuthnCredential {
  id: ID!
}

enum UserRole {
  REGULAR
  ADMIN
}

enum UserLevel {
  FREE
  MEMBER
  PATRON
}

enum SubscriptionLevel {
  MEMBER
  PATRON
}

type UserSettings {
  spoilerAvoidance: SpoilerAvoidance!
}

type User {
  id: ID!
  role: UserRole!
  level: UserLevel!
  email: Email!
  githubAccount: GithubAccount
  googleAccount: GoogleAccount
  webAuthnCredentials: [WebAuthnCredential!]!
  accessTokens: [PersonalAccessToken!]!
  settings: UserSettings!
  giftCode: RedeemedAccountGiftCode
  subscription: Subscription
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

type Subscription {
  id: ID!
  level: SubscriptionLevel!
  status: SubscriptionStatus!
  startedAt: Date
  endedAt: Date
  paymentFlow: SubscriptionPaymentFlow
}

type SubscriptionPaymentFlow {
  apiKey: String!
  level: SubscriptionLevel!
  clientSecret: String!
}

scalar GithubID

type GithubAccount {
  id: GithubID!
  username: String!
  profileUrl: Url!
  avatarImage: Image
}

scalar GoogleID

type GoogleAccount {
  id: GoogleID!
  email: Email!
  image: Image
  createdAt: Date!
  updatedAt: Date!
}

type PersonalAccessToken {
  id: ID!
  label: String
  prefix: String!
  length: Int!
  createdAt: Date!
  lastUsedAt: Date
  lastFourCharacters: String!
}

type RedeemedAccountGiftCode {
  code: String!
  redeemedAt: Date!
}

# Mutation

type CreateAccountPayload {
  email: Email!
}

type DeleteAccountPayload {
  deletedId: ID!
}

type CreateAccountGiftCodePayload {
  code: String!
}

type RedeemAccountCodePayload {
  giftCode: RedeemedAccountGiftCode
}

type PrepareSubscriptionPayload {
  subscription: Subscription
}

type CancelSubscriptionPayload {
  subscription: Subscription
}

type SignInPayload {
  email: Email!
}

type SignOutPayload {
  userId: ID!
}

type DisconnectGithubAccountPayload {
  deletedAccount: GithubAccount
}

type DisconnectGoogleAccountPayload {
  deletedAccountId: ID
}

type CreatePersonalAccessTokenPayload {
  plaintextToken: String
  personalAccessToken: PersonalAccessToken
}

type DeletePersonalAccessTokenPayload {
  deletedPersonalAccessTokenId: ID
}

type UpdateUserSettingsPayload {
  user: User!
}

type StartRegistrationPayload {
  result: JSON!
}

type CreateWebAuthnCredentialPayload {
  credential: WebAuthnCredential
  user: User!
}

type DeleteWebAuthnCredential {
  deletedCredentialId: ID!
  user: User!
}

type StartWebAuthnSignInPayload {
  result: JSON!
}

type CompleteWebAuthnSignInPayload {
  user: User
  credential: WebAuthnCredential
}
