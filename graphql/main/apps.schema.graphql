#import "./shared.schema.graphql"
#import "./users.schema.graphql"
#import "./media.schema.graphql"

extend type Query {
  apps: [App!]!
  app(id: ID!): App
  clipsInstallation(id: ID!): ClipsExtensionInstallation
  clipsInstallations(
    target: ClipsExtensionPoint
    conditions: [ClipsExtensionPointSupportConditionInput!]
  ): [ClipsExtensionInstallation!]!
}

extend type Mutation {
  createApp(name: String!, handle: String): CreateAppPayload!
  deleteApp(id: ID!): DeleteAppPayload!
  updateApp(id: ID!, name: String): UpdateAppPayload!
  createAppSecret(id: ID!): CreateAppSecretPayload!
  createClipsExtension(
    appId: ID!
    name: String!
    handle: String
    initialVersion: CreateClipsInitialVersion
  ): CreateClipsExtensionPayload!
  deleteClipsExtension(id: ID!): DeleteClipsExtensionPayload!
  updateClipsExtension(id: ID!, name: String): UpdateClipsExtensionPayload!
  pushClipsExtension(
    id: ID!
    name: String
    extends: [ClipsExtensionPointSupportInput!]
    build: ClipsExtensionBuildInput!
    settings: ClipsExtensionSettingsInput
    translations: JSON
  ): PushClipsExtensionPayload!
  publishLatestClipsExtensionVersion(
    id: ID!
  ): PublishClipsExtensionVersionPayload!
  installApp(id: ID!): InstallAppPayload!
  installClipsExtension(
    id: ID!
    target: ClipsExtensionPoint
    settings: JSON
  ): InstallClipsExtensionPayload!
  uninstallClipsExtension(id: ID!): UninstallClipsExtensionPayload!
  updateClipsExtensionInstallation(
    id: ID!
    settings: JSON
  ): UpdateClipsExtensionInstallationPayload!
}

extend type User {
  apps: [App!]!
  app(id: ID, handle: String): App
}

extend type Series {
  clipsToRender(
    target: ClipsExtensionPoint!
  ): [ClipsExtensionPointInstallation!]!
}

extend type WatchThrough {
  clipsToRender(
    target: ClipsExtensionPoint!
  ): [ClipsExtensionPointInstallation!]!
}

scalar TranslationKey
scalar ClipsExtensionPoint
scalar ClipsExtensionApiVersion
scalar ClipsLiveQuery
scalar ClipsContentHTML
scalar ClipsLoadingUIContentHTML

type Icon {
  source: Url!
}

type App {
  id: ID!
  name: String!
  handle: String!
  icon: Icon
  extensions: [AppExtension!]!
  isInstalled: Boolean!
  hasSecret: Boolean!
  userDetailsJWT: String
}

type ClipsExtension {
  id: ID!
  name: String!
  handle: String!
  app: App!
  latestVersion: ClipsExtensionVersion
  versions: [ClipsExtensionVersion!]!

  isInstalled: Boolean!
}

union AppExtension = ClipsExtension

enum ClipsExtensionVersionStatus {
  PUBLISHED
  BUILDING
}

type ClipsExtensionVersion {
  id: ID!
  status: ClipsExtensionVersionStatus!
  apiVersion: ClipsExtensionApiVersion!
  extension: ClipsExtension!
  extends: [ClipsExtensionPointSupport!]!
  settings: ClipsExtensionSettings!
  translations: JSON
}

# Extension point conditions

type ClipsExtensionPointSupportSeriesCondition {
  handle: String
}

type ClipsExtensionPointSupportCondition {
  series: ClipsExtensionPointSupportSeriesCondition
}

type ClipsExtensionPointSupport {
  target: ClipsExtensionPoint!
  conditions: [ClipsExtensionPointSupportCondition!]!
  entry: ClipsExtensionPointSupportEntry!
  liveQuery: ClipsExtensionPointSupportLiveQuery
  loading: ClipsExtensionPointSupportLoading
}

type ClipsExtensionPointSupportEntry {
  asHTML: ClipsExtensionPointSupportEntryHTML
  asJavaScript: ClipsExtensionPointSupportEntryJavaScript
}

type ClipsExtensionPointSupportEntryHTML {
  content: ClipsContentHTML!
}

type ClipsExtensionPointSupportEntryJavaScript {
  src: Url!
}

type ClipsExtensionPointSupportLiveQuery {
  content: ClipsLiveQuery!
}

type ClipsExtensionPointSupportLoading {
  content: ClipsLoadingUIContentHTML!
}

type ClipsExtensionPointSupportLoadingUI {
  html: ClipsLoadingUIContentHTML!
}

input ClipsExtensionPointSupportSeriesConditionInput {
  id: ID
  handle: String
}

input ClipsExtensionPointSupportConditionInput {
  series: ClipsExtensionPointSupportSeriesConditionInput
}

enum ClipsExtensionBuildModuleContentType {
  HTML
  GRAPHQL
  JAVASCRIPT
}

input ClipsExtensionBuildModuleInput {
  name: String!
  content: String!
  contentType: ClipsExtensionBuildModuleContentType!
}

input ClipsExtensionBuildInput {
  modules: [ClipsExtensionBuildModuleInput!]!
}

input ClipsExtensionPointSupportEntryInput {
  module: String!
}

input ClipsExtensionPointSupportLiveQueryInput {
  module: String!
}

input ClipsExtensionPointSupportLoadingInput {
  module: String!
}

input ClipsExtensionPointSupportInput {
  target: ClipsExtensionPoint!
  entry: ClipsExtensionPointSupportEntryInput!
  liveQuery: ClipsExtensionPointSupportLiveQueryInput
  loading: ClipsExtensionPointSupportLoadingInput
  conditions: [ClipsExtensionPointSupportConditionInput!]
}

# Extension settings

type ClipsExtensionSettings {
  fields: [ClipsExtensionSettingsField!]!
}

type ClipsExtensionSettingsStringTranslation {
  key: TranslationKey!
}

type ClipsExtensionSettingsStringStatic {
  value: String!
}

union ClipsExtensionSettingsString =
    ClipsExtensionSettingsStringTranslation
  | ClipsExtensionSettingsStringStatic

interface ClipsExtensionSettingsFieldBase {
  key: String!
  label: ClipsExtensionSettingsString!
}

type ClipsExtensionSettingsStringField implements ClipsExtensionSettingsFieldBase {
  key: String!
  label: ClipsExtensionSettingsString!
  default: String
}

type ClipsExtensionSettingsNumberField implements ClipsExtensionSettingsFieldBase {
  key: String!
  label: ClipsExtensionSettingsString!
  default: Float
}

type ClipsExtensionSettingsOptionsFieldOption {
  value: String!
  label: ClipsExtensionSettingsString!
}

type ClipsExtensionSettingsOptionsField implements ClipsExtensionSettingsFieldBase {
  key: String!
  label: ClipsExtensionSettingsString!
  default: String
  options: [ClipsExtensionSettingsOptionsFieldOption!]!
}

input ClipsExtensionSettingsInput {
  fields: [ClipsExtensionSettingsFieldInput!]
}

union ClipsExtensionSettingsField =
    ClipsExtensionSettingsStringField
  | ClipsExtensionSettingsNumberField
  | ClipsExtensionSettingsOptionsField

input ClipsExtensionSettingsFieldInput {
  string: ClipsExtensionSettingsStringFieldInput
  number: ClipsExtensionSettingsNumberFieldInput
  options: ClipsExtensionSettingsOptionsFieldInput
}

input ClipsExtensionSettingsStringInput {
  static: String
  translation: TranslationKey
}

input ClipsExtensionSettingsStringFieldInput {
  key: String!
  label: ClipsExtensionSettingsStringInput!
  default: String
}

input ClipsExtensionSettingsNumberFieldInput {
  key: String!
  label: ClipsExtensionSettingsStringInput!
  default: Float
}

input ClipsExtensionSettingsOptionsFieldInput {
  key: String!
  label: ClipsExtensionSettingsStringInput!
  default: String
  options: [ClipsExtensionSettingsOptionsFieldOptionInput!]!
}

input ClipsExtensionSettingsOptionsFieldOptionInput {
  value: String!
  label: ClipsExtensionSettingsStringInput!
}

enum ClipsExtensionVersionStatus {
  PUBLISHED
  BUILDING
}

type AppInstallation {
  id: ID!
  app: App!
  extensions: [AppExtensionPointInstallation!]!
}

type ClipsExtensionInstallation {
  id: ID!
  extension: ClipsExtension!
  version: ClipsExtensionVersion!
  appInstallation: AppInstallation!
  settings: JSON
  translations: JSON
  extensionPoints: [ClipsExtensionPointInstallation!]!
}

type ClipsExtensionPointInstallation {
  id: ID!
  target: ClipsExtensionPoint!
  apiVersion: ClipsExtensionApiVersion!
  settings: JSON
  translations: JSON
  extension: ClipsExtension!
  extensionInstallation: ClipsExtensionInstallation!
  appInstallation: AppInstallation!
  entry: ClipsExtensionPointSupportEntry!
  liveQuery: ClipsExtensionPointSupportLiveQuery
  loading: ClipsExtensionPointSupportLoading
}

union AppExtensionPointInstallation = ClipsExtensionInstallation

# Mutations

input CreateClipsInitialVersion {
  extends: [ClipsExtensionPointSupportInput!]
  build: ClipsExtensionBuildInput!
  translations: JSON
  settings: ClipsExtensionSettingsInput
}

type CreateAppPayload {
  app: App
}

type DeleteAppPayload {
  deletedId: ID
}

type UpdateAppPayload {
  app: App
}

type CreateClipsExtensionPayload {
  app: App
  extension: ClipsExtension
  version: ClipsExtensionVersion
}

type DeleteClipsExtensionPayload {
  app: App
  deletedId: ID
}

type UpdateClipsExtensionPayload {
  app: App
  extension: ClipsExtension
}

type PushClipsExtensionPayload {
  extension: ClipsExtension
  version: ClipsExtensionVersion
}

type PublishClipsExtensionVersionPayload {
  extension: ClipsExtension
  version: ClipsExtensionVersion
}

type InstallAppPayload {
  app: App
  installation: AppInstallation
}

type InstallClipsExtensionPayload {
  extension: ClipsExtension
  installation: ClipsExtensionInstallation
}

type UninstallClipsExtensionPayload {
  extension: ClipsExtension
  deletedInstallationId: ID
}

type UpdateClipsExtensionInstallationPayload {
  extension: ClipsExtension
  installation: ClipsExtensionInstallation
}

type CreateAppSecretPayload {
  app: App
  secret: String
}
