#import "./shared.schema.graphql"

scalar EpisodeSelector
scalar SeasonSelector
scalar EpisodeEndpointSelector

extend type Query {
  series(id: ID, handle: String): Series
  season(id: ID!): Season
  randomSeries: Series!
}

extend type Mutation {
  updateSeason(id: ID!, status: SeasonStatus): UpdateSeasonPayload!
  deleteSeries(id: ID!): DeleteSeriesPayload!
  synchronizeSeriesWithTmdb(id: ID!): SynchronizeSeriesWithTmdbPayload!
}

type Episode {
  id: ID!
  title: String!
  series: Series!
  season: Season!
  seasonNumber: Int!
  selector: EpisodeSelector!
  number: Int!
  firstAired: Date
  hasAired: Boolean!
  still: Image
  overview: String
}

input EpisodeSliceInput {
  season: Int!
  episode: Int
}

type EpisodeSlice {
  season: Int!
  episode: Int
}

enum SeasonStatus {
  CONTINUING
  ENDED
}

type Season {
  id: ID!
  tmdbUrl: Url!
  imdbUrl: Url!
  series: Series!
  number: Int!
  selector: SeasonSelector!
  episodes: [Episode!]!
  episodeCount: Int!
  firstAired: Date
  poster: Image
  overview: String
  isSpecials: Boolean!
  isUpcoming: Boolean!
  isCurrentlyAiring: Boolean!
  status: SeasonStatus!
}

enum SeriesStatus {
  RETURNING
  ENDED
  CANCELLED
  IN_PRODUCTION
}

type Series {
  id: ID!
  handle: String!
  tmdbId: ID!
  tmdbUrl: Url!
  imdbId: ID
  imdbUrl: Url
  name: String!
  poster: Image
  overview: String
  firstAired: Date
  status: SeriesStatus!
  seasons: [Season!]!
  season(selector: SeasonSelector, number: Int): Season
  episodes: [Episode!]!
  episode(selector: EpisodeSelector, number: Int, seasonNumber: Int): Episode
}

# Mutations

type UpdateSeasonPayload {
  season: Season
}

type DeleteSeriesPayload {
  deletedId: ID
}

type SynchronizeSeriesWithTmdbPayload {
  series: Series
}
